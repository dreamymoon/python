（一）关于numpy部分的应用
#encoding=utf-8
import numpy as np

def main():
    #第一部分
    lst = [[1, 3, 5], [2, 4, 6]]
    print (type(lst))
    np_lst=np.array(lst)
    print (type(np_lst))
    np_lst=np.array(lst,dtype=np.float)
    print(np_lst.shape)#数组每一维的大小
    print(np_lst.ndim)#数组的维数
    print(np_lst.dtype)#数组中元素的类型（numpy.int32, numpy.int16, and numpy.float64等）
    print(np_lst.itemsize)#每个元素占几个字节
    print(np_lst.size)#数组中全部元素的数量
    #第二部分
    print(np.zeros([2,4]))
    print(np.ones([3,5]))
    print('Rand:')#零一之间的随机数
    print(np.random.rand(2,4))#两行四列
    print(np.random.rand())
    print('RandInt:')
    print(np.random.randint(1,10,3))#整数，1~10，取3个
    print('Randn:')#标准正态分布
    print(np.random.randn(2,4))
    print('Choice:')
    print(np.random.choice([10,20,30])) #三选一
    print('Distribute:')
    print(np.random.beta(1,10,100))#1~10之间的beta分布
    #第三部分
    print(np.arange(1,11).reshape(2,5))#产生等差数列，包括1不包括11，reshape两行五列
    lst=np.arange(1,11).reshape(2,5)
    print(np.exp(lst)) #exp指数，exp2指数平方，sqrt开方，sin三角函数，log对数

    lst= np.array([[[1,2,3,4],
                    [4,5,6,7]],
                    [[7,8,9,10],
                    [10,11,12,13]],
                    [[14,15,16,17],
                    [18,19,20,21]]
                   ])
    print(lst.sum(axis=2)) #sum全部加总，axis=0，[a,b,c]最外层对应加总，axis=1,[(x1,y1),(x2,y2),(x3,y3)],123分别加总
    print(lst.max(axis=1))
    print(lst.min(axis=0))

    lst1=np.array([10,20,30,40])
    lst2=np.array([4,3,2,1])
    print(lst1+lst2)#加减乘除都可以，**平方，e.g.lst1**2
    print(np.dot(lst1.reshape([2,2]),lst2.reshape([2,2]))) #点乘
    print(np.concatenate((lst1,lst2),axis=0)) #追加函数
    print(np.vstack((lst1,lst2)))#合成函数
    print(np.hstack((lst1, lst2)))#合成函数
    print(np.split(lst1,4))#一个函数分成4个
    print(np.copy(lst1) ) #拷贝数组
    #第四部分
    from numpy.linalg import *
    print(np.eye(3))#单位矩阵
    lst=np.array([[1,2],
                  [3,4]])
    print(inv(lst))#逆矩阵，相乘等于单位矩阵
    print(lst.transpose())#转置矩阵，右上角小T
    print(det(lst))#行列式
    print(eig(lst))#array1特征值，array2特征向量
    y=np.array([[5.],[7.]])#a+2b=5,3a+4b=7,求解ab
    print(solve(lst,y))
    #第五部分
    print('FFT:')#信号处理领域碰到的概念
    print(np.fft.fft(np.array([1,1,1,1,1,1,1,1])))
    print('Coef:')#计算相关系数，如皮尔逊系数
    print(np.corrcoef([1,0,1],[0,2,1]))
    print(np.poly1d([2,1,3]))#一元函数

if __name__=='__main__':
    main()
    
（二）关于matplotlib部分的应用
#encoding=utf-8
import numpy as np

import sys
reload(sys)
sys.setdefaultencoding('utf-8')#这三行加入不会出现图片无法显示问题

def main():
    #第一课line，折线图
    import matplotlib.pyplot as plt
    x=np.linspace(-np.pi,np.pi,256,endpoint=True)#-Π，Π之间，256个点，包含最后一个点
    c,s=np.cos(x),np.sin(x)
    plt.figure(1)
    plt.plot(x,c,color='blue',linewidth=1.0,linestyle='-',label='COS',alpha=0.5)#alpha透明度
    plt.plot(x,s,'r*',label='SIN')#r*,线型是*
    plt.title('COS&SIN')

    ax=plt.gca()#轴的编辑器
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.spines['left'].set_position(('data',0))
    ax.spines['bottom'].set_position(('data',0))
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    plt.xticks([-np.pi,-np.pi/2,0,np.pi/2,np.pi],
               [r'$-\pi$',r'$-\pi/2$',r'$0$',r'$+\pi/2$',r'$+\pi$'])#x轴设置
    plt.yticks(np.linspace(-1,1,5,endpoint=True))#-1~1，5个点,y轴设置
    for label in ax.get_xticklabels()+ax.get_yticklabels():
        label.set_fontsize(16)
        label.set_bbox(dict(facecolor='white',edgecolor='None',alpha=0.2))
    plt.legend(loc='upper left')#图例位置
    plt.grid()#网格线
    #plt.axis([-1,1,-0.5,1])#显示范围，横轴最小，最大，纵轴最小，最大
    plt.fill_between(x,np.abs(x)<0.5,c,c>0.5,color='orange',alpha=0.25)#abs绝对值，x<0.5,显示1，x>0.5，显示0
    t=1
    plt.plot([t,t],[0,np.cos(t)],'y',linewidth=3,linestyle='--')#划线
    plt.annotate('cos(1)',xy=(t,np.cos(1)),xycoords='data',xytext=(+10,+30),
                 textcoords='offset points',arrowprops=dict(arrowstyle='->',connectionstyle='arc3,rad=.2')
                 )#给图加注释,加上arrowprops,可以用箭头指向cos(1),防止重合，connectionstyle表示弧度
    plt.show()#显示图片
    
    #第二课之scatter，散点图
    fig=plt.figure()#表格
    ax=fig.add_subplot(3,3,1)#画在三行三列的第一个位置上
    n=128
    X=np.random.normal(0,1,n)
    Y=np.random.normal(0,1,n)
    T=np.arctan2(Y,X)#上色
    #plt.axes([0.025,0.025,0.95,0.95])
    ax.scatter(X,Y,s=75,c=T,alpha=.5)#s大小，c颜色
    plt.xlim(-1.5,1.5),plt.xticks([])#x的范围
    plt.ylim(-1.5, 1.5), plt.yticks([])#y的范围
    plt.axis()
    plt.title('scatter')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.show()
    #第二课之bar，柱状图
    fig.add_subplot(332)#10范围内不用逗号也可
    n=10 #10个点
    X=np.arange(n) #构建数列0-9
    Y1=(1-X/float(n))*np.random.uniform(0.5,1.0,n)
    Y2=(1-X/float(n))*np.random.uniform(0.5,1.0,n)
    plt.bar(X,+Y1,facecolor='#9999ff',edgecolor='white')#把Y1放在横轴上方
    plt.bar(X,-Y2, facecolor='#ff9999', edgecolor='white')#把Y2放在横轴下方
    for x,y in zip(X,Y1):
        plt.text(x+0.4,y+0.05,'%.2f'%y, ha='center',va='bottom')#添加注释
    for x,y in zip(X,Y2):
        plt.text(x + 0.4, -y-0.05, '%.2f' % y, ha='center', va='top')
    plt.show()
    

if __name__=='__main__':
    main()
