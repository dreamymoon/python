（一）关于numpy部分的应用
#encoding=utf-8
import numpy as np

def main():
    #第一部分
    lst = [[1, 3, 5], [2, 4, 6]]
    print (type(lst))
    np_lst=np.array(lst)
    print (type(np_lst))
    np_lst=np.array(lst,dtype=np.float)
    print(np_lst.shape)#数组每一维的大小
    print(np_lst.ndim)#数组的维数
    print(np_lst.dtype)#数组中元素的类型（numpy.int32, numpy.int16, and numpy.float64等）
    print(np_lst.itemsize)#每个元素占几个字节
    print(np_lst.size)#数组中全部元素的数量
    #第二部分
    print(np.zeros([2,4]))
    print(np.ones([3,5]))
    print('Rand:')#零一之间的随机数
    print(np.random.rand(2,4))#两行四列
    print(np.random.rand())
    print('RandInt:')
    print(np.random.randint(1,10,3))#整数，1~10，取3个
    print('Randn:')#标准正态分布
    print(np.random.randn(2,4))
    print('Choice:')
    print(np.random.choice([10,20,30])) #三选一
    print('Distribute:')
    print(np.random.beta(1,10,100))#1~10之间的beta分布
    #第三部分
    print(np.arange(1,11).reshape(2,5))#产生等差数列，包括1不包括11，reshape两行五列
    lst=np.arange(1,11).reshape(2,5)
    print(np.exp(lst)) #exp指数，exp2指数平方，sqrt开方，sin三角函数，log对数

    lst= np.array([[[1,2,3,4],
                    [4,5,6,7]],
                    [[7,8,9,10],
                    [10,11,12,13]],
                    [[14,15,16,17],
                    [18,19,20,21]]
                   ])
    print(lst.sum(axis=2)) #sum全部加总，axis=0，[a,b,c]最外层对应加总，axis=1,[(x1,y1),(x2,y2),(x3,y3)],123分别加总
    print(lst.max(axis=1))
    print(lst.min(axis=0))

    lst1=np.array([10,20,30,40])
    lst2=np.array([4,3,2,1])
    print(lst1+lst2)#加减乘除都可以，**平方，e.g.lst1**2
    print(np.dot(lst1.reshape([2,2]),lst2.reshape([2,2]))) #点乘
    print(np.concatenate((lst1,lst2),axis=0)) #追加函数
    print(np.vstack((lst1,lst2)))#合成函数
    print(np.hstack((lst1, lst2)))#合成函数
    print(np.split(lst1,4))#一个函数分成4个
    print(np.copy(lst1) ) #拷贝数组
    #第四部分
    from numpy.linalg import *
    print(np.eye(3))#单位矩阵
    lst=np.array([[1,2],
                  [3,4]])
    print(inv(lst))#逆矩阵，相乘等于单位矩阵
    print(lst.transpose())#转置矩阵，右上角小T
    print(det(lst))#行列式
    print(eig(lst))#array1特征值，array2特征向量
    y=np.array([[5.],[7.]])#a+2b=5,3a+4b=7,求解ab
    print(solve(lst,y))
    #第五部分
    print('FFT:')#信号处理领域碰到的概念
    print(np.fft.fft(np.array([1,1,1,1,1,1,1,1])))
    print('Coef:')#计算相关系数，如皮尔逊系数
    print(np.corrcoef([1,0,1],[0,2,1]))
    print(np.poly1d([2,1,3]))#一元函数

if __name__=='__main__':
    main()
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————    
（二）关于matplotlib部分的应用
#encoding=utf-8
import numpy as np

import sys
reload(sys)
sys.setdefaultencoding('utf-8')#这三行加入不会出现图片无法显示问题

def main():
    import matplotlib.pyplot as plt
    
    #第一课line，折线图    
    x=np.linspace(-np.pi,np.pi,256,endpoint=True)#-Π，Π之间，256个点，包含最后一个点
    c,s=np.cos(x),np.sin(x)
    plt.figure(1)
    plt.plot(x,c,color='blue',linewidth=1.0,linestyle='-',label='COS',alpha=0.5)#alpha透明度
    plt.plot(x,s,'r*',label='SIN')#r*,线型是*
    plt.title('COS&SIN')

    ax=plt.gca()#轴的编辑器
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.spines['left'].set_position(('data',0))
    ax.spines['bottom'].set_position(('data',0))
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    plt.xticks([-np.pi,-np.pi/2,0,np.pi/2,np.pi],
               [r'$-\pi$',r'$-\pi/2$',r'$0$',r'$+\pi/2$',r'$+\pi$'])#x轴设置
    plt.yticks(np.linspace(-1,1,5,endpoint=True))#-1~1，5个点,y轴设置
    for label in ax.get_xticklabels()+ax.get_yticklabels():
        label.set_fontsize(16)
        label.set_bbox(dict(facecolor='white',edgecolor='None',alpha=0.2))
    plt.legend(loc='upper left')#图例位置
    plt.grid()#网格线
    #plt.axis([-1,1,-0.5,1])#显示范围，横轴最小，最大，纵轴最小，最大
    plt.fill_between(x,np.abs(x)<0.5,c,c>0.5,color='orange',alpha=0.25)#abs绝对值，x<0.5,显示1，x>0.5，显示0
    t=1
    plt.plot([t,t],[0,np.cos(t)],'y',linewidth=3,linestyle='--')#划线
    plt.annotate('cos(1)',xy=(t,np.cos(1)),xycoords='data',xytext=(+10,+30),
                 textcoords='offset points',arrowprops=dict(arrowstyle='->',connectionstyle='arc3,rad=.2')
                 )#给图加注释,加上arrowprops,可以用箭头指向cos(1),防止重合，connectionstyle表示弧度
    plt.show()#显示图片  

    #第二课之scatter，散点图
    fig=plt.figure()#表格
    ax=fig.add_subplot(3,3,1)#画在三行三列的第一个位置上
    n=128
    X=np.random.normal(0,1,n)
    Y=np.random.normal(0,1,n)
    T=np.arctan2(Y,X)#上色
    #plt.axes([0.025,0.025,0.95,0.95])
    ax.scatter(X,Y,s=75,c=T,alpha=.5)#s大小，c颜色
    plt.xlim(-1.5,1.5),plt.xticks([])#x的范围
    plt.ylim(-1.5, 1.5), plt.yticks([])#y的范围
    plt.axis()
    plt.title('scatter')
    plt.xlabel('x')
    plt.ylabel('y')
    
    #第二课之bar，柱状图
    fig.add_subplot(332)#10范围内不用逗号也可
    n=10 #10个点
    X=np.arange(n) #构建数列0-9
    Y1=(1-X/float(n))*np.random.uniform(0.5,1.0,n)
    Y2=(1-X/float(n))*np.random.uniform(0.5,1.0,n)
    plt.bar(X,+Y1,facecolor='#9999ff',edgecolor='white')#把Y1放在横轴上方
    plt.bar(X,-Y2, facecolor='#ff9999', edgecolor='white')#把Y2放在横轴下方
    for x,y in zip(X,Y1):
        plt.text(x+0.4,y+0.05,'%.2f'%y, ha='center',va='bottom')#添加注释
    for x,y in zip(X,Y2):
        plt.text(x + 0.4, -y-0.05, '%.2f' % y, ha='center', va='top')
    
    #第二课之pie，饼图
    fig.add_subplot(333)
    n=20
    Z=np.ones(n)#权益变量，代表每一块的值
    Z[-1]*=2 #最后一个设成2
    plt.pie(Z,explode=Z*.05, colors=['%f'%(i/float(n)) for i in range(n)],
            labels=['%.2f'% (i/float(n)) for i in range(n)])
    #explode每个扇形离中心的距离，color此处表示每个颜色的灰度不一样
    plt.gca().set_aspect('equal')#正的圆形，不会形变成椭圆
    plt.xticks([]),plt.yticks([])

    #第二课之polar，极坐标
    fig.add_subplot(334,polar=True)#后半句使它变成极值图
    n=20
    theta=np.arange(0.0,2*np.pi,2*np.pi/n)#起始点，终点，间隔点
    radii= 10*np.random.rand(n)#半径
    plt.polar(theta,radii)
    #plt.plot(theta,radii)

    #第二课之heatmap 热图
    fig.add_subplot(335)
    from matplotlib import cm #color nap？上色用
    data=np.random.rand(3,3)#3*3随机数
    cmap=cm.Blues #指定蓝色
    map=plt.imshow(data,interpolation='nearest', cmap=cmap,aspect='auto',vmin=0,vmax=1)
    #极小值颜色0，值越大，越接近蓝色

    #第二课之3D图
    from mpl_toolkits.mplot3d import Axes3D
    ax=fig.add_subplot(336,projection='3d') #指定成3D
    ax.scatter(1,1,3,s=100)

    #第二课之hot map热力图
    fig.add_subplot(313) #一行三列，占了3*3中最后一行
    def f(x,y):
        return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)
    n=256
    x=np.linspace(-3,3,n)
    y=np.linspace(-3,3,n)
    X,Y=np.meshgrid(x,y)
    plt.contourf(X,Y,f(X,Y),8,alpha=.75,cmap=plt.cm.hot)
    plt.savefig('data.png') #保存图片
    plt.show()
    
if __name__=='__main__':
    main()
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
（三）关于scipy部分的应用
#encoding=utf-8
import numpy as np
from pylab import *
import sys
reload(sys)
sys.setdefaultencoding('utf-8')#这三行加入不会出现图片无法显示问题

def main():
    #1--Integral积分
    from scipy.integrate import quad,dblquad,nquad#积分，二元积分,n维积分
    print (quad(lambda x:np.exp(-x),0,np.inf))#数值积分和定积分不一样，会有误差
    #定义函数lambda为自然对数，范围0-∞，结果e.g.(1,2),表示1为值，误差为2，即-1~3的范围
    print (dblquad(lambda t,x:np.exp(-x*t)/t**3,0,np.inf,lambda x:1,lambda x:np.inf))
    #函数，t的取值范围，x的取值范围（相当于t的函数，此处用函数定义）
    def f(x,y):
        return x*y
    def bound_y():
        return [0,0.5]#定义y的取值范围
    def bound_x(y):
        return [0,1-2*y]#定义x的取值范围
    print (nquad(f,[bound_x,bound_y]))
   
    #2--Optimizer
    from scipy.optimize import minimize #引入计算最小值的模块
    def rosen(x):
        return sum(100.0*(x[1:]-x[:-1]**2.0)**2.0+(1-x[:-1])**2.0)
    x0=np.array([1.3,0.7,0.8,1.9,1.2])
    res=minimize(rosen,x0,method='nelder-mead',options={'xtol':1e-8,'disp':True})
    #nelder-mead是一种算法，可自行了解,xtol表示精度，disp显示中间过程
    print ('ROSE MINI:', res.x)  # 求得了函数全局最小值

    def func(x):#x指函数当中存在的所有未知数
        return -(2*x[0]*x[1]+2*x[0]-x[0]**2-2*x[1]**2)
    def func_deriv(x):#原函数相对于xy的偏导数
        dfdx0=-(-2*x[0]+2*x[1]+2)
        dfdx1=-(2*x[0]-4*x[1])
        return np.array([dfdx0,dfdx1])
    cons=({'type':"eq",'fun':lambda x:np.array([x[0]**3-x[1]]),'jac':lambda x:np.array([3.0*(x[0]**2.0),-1.0])},
          {'type':'ineq','fun':lambda x:np.array([x[1]-1]),'jac':lambda x:np.array([0.0,1.0])})
    #约束条件,equal,not equal,less than,not less than等,jac:雅可比行列式，后面为前面的偏导
    res=minimize(func,[-1.0,1.0],jac=func_deriv,constraints=cons,method='SLSQP',options={'disp':True})
    #目标函数，范围-1~1，雅可比行列式，约束条件，方法，选项：显示中间过程
    print ('RESTRICT:',res) #求得了函数约束条件下的最小值
    from scipy.optimize import root #求根
    def fun(x):
        return x+2*np.cos(x)
    sol=root(fun,0.1)
    print ('ROOT:',sol.x,sol.fun)
    
    #3--Interpolation #此时最开始引入绘图函数pylab
    x=np.linspace(0,1,10)#定义0~1之间10个数
    y=np.sin(2*np.pi*x)
    from scipy.interpolate import interp1d #一维插值，2d是二维
    li=interp1d(x,y,kind='cubic')#三次函数插值，不写的话默认线性插值
    x_new=np.linspace(0,1,50)
    y_new=li(x_new)
    li_res=li(x_new)
    figure()
    plot(x,y,'r')#原来数据
    plot(x_new,y_new,'k')#新的数据
    show()
    print(y_new)
    
    #4--Linear 处理线性函数和矩阵分解
    from scipy import linalg as lg
    arr=np.array([[1,2],[3,4]])
    print ('Det:',lg.det(arr))#计算行列式
    print ('Inv:',lg.inv(arr))#计算逆矩阵
    b=np.array([6,14])
    print ("Sol:",lg.solve(arr,b))#解线性方程组
    print ('Eig:',lg.eig(arr))#解特征值，特征向量
    print ('LU:',lg.lu(arr))#矩阵LU分解
    print ('QR:',lg.qr(arr))#矩阵QR分解
    print ('SVD:',lg.svd(arr))#奇异值分解
    print ('Schur:',lg.schur(arr))#schur分解
    
if __name__=='__main__':
    main()
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
（四）关于pandas部分的应用
#encoding=utf-8
import numpy as np
import pandas as pd
#版本2.7

import sys
reload(sys)
sys.setdefaultencoding('utf-8')#这三行加入不会出现图片无法显示问题

def main():
    #1.Data Structure
    s=pd.Series([i*2 for i in range(1,11)])
    print (type(s))
    dates=pd.date_range('20170301',periods=8)
    df=pd.DataFrame(np.random.randn(8,5),index=dates,columns=list('ABCDE'))
    #8行5列，index主键，即日期，columns属性值
    print (df)
    #df=pd.DataFrame({'A':1,'B':pd.Timestamp('20170301'),'C':pd.Series(1,index=list(range(4)),dtype='float32'),
    #    'D':np.array([3]*4,dtype='float32'),'E':pd.Categorical(['plice','student','teacher','doctor'])})
    #print (df)上述例子注释掉

    #2.1Basic
    print (df.head(3))#打印前3行
    print (df.tail(3))#打印后3行
    print (df.index)
    print (df.values)
    print (df.T)#转置
    print (df.sort_values('C'))#按照C升序排列
    print (df.sort_index(axis=1,ascending=False)) #通过属性值排序，且不为升序，EDCBA
    print (df.describe())#反映所有属性值的数量，平均值，标准差，最小值，最小四分位，中位数，上四分位数，最大值
    #2.2Select 切片
    print (type(df['A']))
    print (df[:3]) #前三条
    print (df['20170301':'20170304'])
    print (df.loc[dates[0]]) #提取第一个信息，此处为0301
    print (df.loc['20170301':'20170304',['B','D']])#多维选择
    print (df.at[dates[0],'C']) #dates[0]不能用'20170301'代替

    print (df.iloc[1:3,2:4]) #不包括3，不包括4
    print (df.iloc[1,4]) #第一行第四列
    print (df.iat[1,4]) #功能同上

    print (df[df.B>0][df.A<0]) #满足两个条件
    print (df[df>0])
    print (df[df["E"].isin([1,2])]) #浮点数，返回空的

    #2.3Set 属性设置
    s1=pd.Series(list(range(10,18)),index=pd.date_range('20170301',periods=8))
    df['F']=s1 #新加一个F
    print (df)
    df.at[dates[0],'A']=0
    print (df)
    df.iat[1,1]=1
    df.loc[:,'D']=np.array([4]*len(df)) #对D列进行修改
    print (df)
    df2=df.copy()#拷贝一份
    df2[df2>0]=-df2 #把正数都变成负数
    print (df2)
    #3.MissingValues 缺失值处理
    df1=df.reindex(index=dates[:4],columns=list('ABCD')+['G'])#index取日期前四个
    df1.loc[dates[0]:dates[1],'G']=1 #G列仅给第一行第二行赋值
    print (df1)
    #缺失值处理方式：一，丢弃；二，填充：1.固定值，2.差/插？值（参考scipy中插值算法）
    print (df1.dropna())#三四行舍弃
    print (df1.fillna(value=1))#填充固定值
    #Statistic
    print (df.mean())
    print (df.var())

    s=pd.Series([1,2,4,np.nan,5,7,9,10],index=dates)
    print (s)
    print (s.shift(2))#将值移了2个，并且后面的值不会补到前面
    print (s.diff())#1阶差分，填上数字可表示多阶差分
    print (s.value_counts())#每个值在series里出现的次数，返回值可以用于绘制直方图
    print (df.apply(np.cumsum))#动态，累加，后面的值是前面的累加值
    print (df.apply(lambda x:x.max()-x.min()))#可自定义函数，如极差————最大值减去最小值
    #4.1 Concat&Merge 表格拼接
    print (df[:3])#可获取dataframe中的一部分
    pieces=[df[:3],df[-3:]]#前三行，后三行
    print (pd.concat(pieces))#拼接前后
    left=pd.DataFrame({'key':['x','y'],'value':[1,2]})
    right=pd.DataFrame({'key':['x','z'],'value':[3,4]})
    print ('LEFT:',left)
    print ('RIGHT:',right)
    print (pd.merge(left,right,on='key',how='left'))#how：有outer（显示xyz），inner（默认）,方式选择left只显示xy
    df3=pd.DataFrame({'A':['a','b','c','b'],'B':list(range(4))})#0123
    print (df3.groupby('A').sum())#聚合方法A，相加

    #4.2 Reshape 交叉分析，数据透视表
    import datetime
    df4=pd.DataFrame({'A':['one','one','two','three']*6,#共24行
                      'B':['a','b','c']*8,#也是24行
                      'C':['foo','foo','foo','bar','bar','bar']*4,
                      'D':np.random.randn(24),
                      'E':np.random.randn(24),
                      'F':[datetime.datetime(2017,i,1) for i in range(1,13)]+
                      [datetime.datetime(2017,i,15) for i in range(1,13)]})
    print (pd.pivot_table(df4,values='D',index=['A','B'],columns=['C']))
    #pivot_table 交叉表，value输出值，index输出项，columns属性值，EF没用为空
    #讲解模糊，找到的一个透视表学习的网址http://python.jobbole.com/81212/

    #5.1Time Series
    t_exam=pd.date_range('20170301',periods=10,freq='S') #freq秒
    print (t_exam)
    #5.2Graph
    ts=pd.Series(np.random.randn(1000),index=pd.date_range('20170301',periods=1000))
    t=ts.cumsum()#累加
    from pylab import *
    ts.plot()
    show()
    #5.3File 文件操作
    df6=pd.read_csv('./loans.csv')#与.py在同一目录下
    print (df6)
    import xlrd  #读取excel
    df7=pd.read_excel('./a.xls','Sheet1')
    print ('Excel',df7)
    df6.to_csv('./loans2.csv') #保存csv及其路径
    import xlwt #保存excel
    df7.to_excel('./a2.xls') #保存excel
    
if __name__=='__main__':
    main()
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
（五）关于scikit-learn部分的应用
#encoding=utf-8
import numpy as np
#版本2.7

def main():
    #6.1 Pre-processing
    from sklearn.datasets import load_iris #通过花萼长宽，花瓣长宽确定鸢尾花种类
    iris=load_iris()
    print (iris)
    print (len(iris['data']))#长度
    from sklearn.cross_validation import train_test_split #引入库
    train_data,test_data,train_target,test_target=train_test_split(iris.data,iris.target,test_size=0.2,random_state=1)
    #把数据分为测试数据和验证数据，0.2为验证数据集占总数据的20%，随机状态1，即随机选择30个数据（总数150）

    #6.2 Model
    from sklearn import tree #引入决策树
    clf=tree.DecisionTreeClassifier(criterion='entropy') #建立分类器，而非回归器,标准为熵
    clf.fit(train_data,train_target)#用训练集建立模型，进行训练，fit
    y_pred=clf.predict(test_data)#用测试集进行预测，predict

    #6.3 Verify 用两种方式进行验证，准确率和混淆矩阵（也称错误矩阵）
    from sklearn import metrics
    print(metrics.accuracy_score(y_true=test_target,y_pred=y_pred)) #准确率为96.67%
    print (metrics.confusion_matrix(y_true=test_target,y_pred=y_pred))
    #横轴表示实际值，纵轴表示预测值，具体分析见网址https://www.cnblogs.com/cnkai/p/7755134.html

    with open('./safe-loans.dot','w') as fw:
        tree.export_graphviz(clf,out_file=fw) #打开文件到XX目录下

if __name__=='__main__':
    main()
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
（六）关于keras部分的应用
#encoding=utf-8
import numpy as np
from keras.models import Sequential#人工神经网络各个层的容器
from keras.layers import Dense,Activation #加权求和的层；激活函数
from keras.optimizers import SGD #随机梯度下的算法
#tensorflow在2.7版本下无法用pip添加，3.7版本暂不支持，建议安装3.5x
def main():
    from sklearn.datasets import load_iris
    iris = load_iris()
    print(iris['target'])#打印显示0000，11111，2222三类，分别转换为100，010，001，如下
    from sklearn.preprocessing import LabelBinarizer
    print (LabelBinarizer().fit_transform(iris['target']))#标签化处理
    from sklearn.cross_validation import train_test_split
    train_data, test_data, train_target, test_target = train_test_split(iris.data, iris.target, test_size=0.2,
                                                                        random_state=1)
    label_train=LabelBinarizer().fit_transform(train_target)
    label_test=LabelBinarizer().fit_transform(test_target)

    model=Sequential(#填入网络结构
        [
            Dense(5,input_dim=4),#第一层输出5个，输入4个，对应4个属性值
            Activation('rule'),#激活函数
            Dense(3),#输入即上一层的输出
            Activation('sigmoid')
        ]
    )
    #model=Sequential()
    #model.add(Dense(5,input=4))  和上面类似功能

    sgd=SGD(lr=0.01,decay=1e-6,momentum=0.9,nesterov=True)
    # 随机梯度算法下的优化器,momentum时滞因子
    model.compile(optimizer=sgd,loss='categorical_crossentropy')
    model.fit(train_data,labels_train,nb_epoch=200,batch_size=40)   #训练200轮，一批用40个数据
    print (model.predict_classes(test_data))
    model.save_weights('./xxxxx')#保存至指定目录
    model.load_weights('./xxxxx')#下次打开的指令
    
if __name__=='__main__':
    main()
——————————————————————————————————————————【完结】（代码摘录自慕课网Python数据分析-基础技术篇，业余学习周期两周）——————————————————————————————————————————————————
