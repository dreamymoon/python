————————————————————————————————— Python Functions, Files, and Dictionaries ———————————————————————————
#week 1
open(filename,'r')读取文件；open(filename,'w')写内容进文件；
.read(n) Read and return a string of n characters, or the entire file as a single string if n is not provided；
.readline()阅读下一行，填456都一样，阅读的都是当前的下一行；.readlines(n) 阅读并返回n行，print的时候每行最后会有\n，表示回车换行；不想换行用.strip()功能
打开几行[:4]要用.readlines()；打开全部用fileref；fileref[:4]这个写法是错误的！
查找文件：../xx/xx 相对查找法；xxx/xx/xx 绝对查找法；建议用前者
————Writing Text Files 注意及时close，square是int，写到file里要先转为string
filename = "squared_numbers.txt"
outfile = open(filename, "w")

for number in range(1, 13):
    square = number * number
    outfile.write(str(square) + "\n")

outfile.close()

infile = open(filename, "r")
print(infile.read()[:10])
infile.close()
————
with open('mydata.txt', 'r') as md 等同于 md = open('mydata.txt', 'r')
————Writing data to a CSV File
olympians = [("John Aalberg", 31, "Cross Country Skiing"),
             ("Minna Maarit Aalto", 30, "Sailing"),
             ("Win Valdemar Aaltonen", 54, "Art Competitions"),
             ("Wakako Abe", 18, "Cycling")]

outfile = open("reduced_olympics.csv", "w")
# output the header row
outfile.write('Name,Age,Sport')
outfile.write('\n')
# output each of the rows:
for olympian in olympians:
    row_string = '{},{},{}'.format(olympian[0], olympian[1], olympian[2])
    outfile.write(row_string)
    outfile.write('\n')
outfile.close()
————

#week 2
创造Dictionaries有两种方法：
第一种：
eng2sp = {}
eng2sp['one'] = 'uno'
eng2sp['two'] = 'dos'
eng2sp['three'] = 'tres'
print(eng2sp)
第二种：
eng2sp = {'three': 'tres', 'one': 'uno', 'two': 'dos'}
print(eng2sp)

del inventory['pears'] 删除某个key和对应的value；items 返回dictionary中的key-value pairs；
inventory["a"]可用inventory.get("a") 代替，因为"a"不在dictionary里的话，前者返回错误，后者返回none。
再进一步，inventory.get("a"，0)，如果a不在dictionary里，则返回0，若在，则返回a的value
acopy = opposites.copy()拷贝原始dictionary，acopy发生变化不改变原始dictionary
————Accumulating Multiple Results In a Dictionary
f = open('scarlet.txt', 'r')
txt = f.read()
# now txt is one long string containing all the characters
x = {} # start with an empty dictionary
for c in txt:
    if c not in x:
        # we have not seen this character before, so initialize a counter for it
        x[c] = 0

    #whether we've seen it before or not, increment its counter
    x[c] = x[c] + 1

print("t: " + str(x['t']) + " occurrences")
print("s: " + str(x['s']) + " occurrences")
————比较最大值最小值
d = {'a': 194, 'b': 54, 'c':34, 'd': 44, 'e': 312, 'full':31}

ks = d.keys()
best_key_so_far = list(ks)[0]  # Have to turn ks into a real list before using [] to select an item
for k in ks:
    if d[k] > d[best_key_so_far]:
        best_key_so_far = k

print("key " + best_key_so_far + " has the highest value, " + str(d[best_key_so_far]))
————

#week 3
function定义，注意后面的括号不要忘记
def name( parameters ):
    ***This is a comment stating what the function does.***   #用***来表示
    statements
结束def中的定义时，用return而不用print，后者会造成误会，且返回none

tuple=["a","b",1942,"you"]为了可读性，可以省略方括号，tuple="a","b",1942,"you"
同理return (c, a)可以写成return c, a
