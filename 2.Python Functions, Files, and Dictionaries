————————————————————————————————— Python Functions, Files, and Dictionaries ———————————————————————————
                                             ———————————— week 1 ————————————
open(filename,'r')读取文件；open(filename,'w')写内容进文件；
.read(n) Read and return a string of n characters, or the entire file as a single string if n is not provided；
.readline()阅读下一行，填456都一样，阅读的都是当前的下一行；.readlines(n) 阅读并返回n行，print的时候每行最后会有\n，表示回车换行；不想换行用.strip()功能
打开几行[:4]要用.readlines()；打开全部用fileref；fileref[:4]这个写法是错误的！
查找文件：../xx/xx 相对查找法；xxx/xx/xx 绝对查找法；建议用前者
————Writing Text Files 注意及时close，square是int，写到file里要先转为string
filename = "squared_numbers.txt"
outfile = open(filename, "w")

for number in range(1, 13):
    square = number * number
    outfile.write(str(square) + "\n")

outfile.close()

infile = open(filename, "r")
print(infile.read()[:10])
infile.close()
————
with open('mydata.txt', 'r') as md 等同于 md = open('mydata.txt', 'r')
————Writing data to a CSV File
olympians = [("John Aalberg", 31, "Cross Country Skiing"),
             ("Minna Maarit Aalto", 30, "Sailing"),
             ("Win Valdemar Aaltonen", 54, "Art Competitions"),
             ("Wakako Abe", 18, "Cycling")]

outfile = open("reduced_olympics.csv", "w")
# output the header row
outfile.write('Name,Age,Sport')
outfile.write('\n')
# output each of the rows:
for olympian in olympians:
    row_string = '{},{},{}'.format(olympian[0], olympian[1], olympian[2])
    outfile.write(row_string)
    outfile.write('\n')
outfile.close()
————

                                          ———————————————— week 2 ——————————————
创造Dictionaries有两种方法：
第一种：
eng2sp = {}
eng2sp['one'] = 'uno'
eng2sp['two'] = 'dos'
eng2sp['three'] = 'tres'
print(eng2sp)
第二种：
eng2sp = {'three': 'tres', 'one': 'uno', 'two': 'dos'}
print(eng2sp)

del inventory['pears'] 删除某个key和对应的value；items 返回dictionary中的key-value pairs；
inventory["a"]可用inventory.get("a") 代替，因为"a"不在dictionary里的话，前者返回错误，后者返回none。
再进一步，inventory.get("a"，0)，如果a不在dictionary里，则返回0，若在，则返回a的value
acopy = opposites.copy()拷贝原始dictionary，acopy发生变化不改变原始dictionary
————Accumulating Multiple Results In a Dictionary
f = open('scarlet.txt', 'r')
txt = f.read()
# now txt is one long string containing all the characters
x = {} # start with an empty dictionary
for c in txt:
    if c not in x:
        # we have not seen this character before, so initialize a counter for it
        x[c] = 0

    #whether we've seen it before or not, increment its counter
    x[c] = x[c] + 1

print("t: " + str(x['t']) + " occurrences")
print("s: " + str(x['s']) + " occurrences")
————比较最大值最小值
d = {'a': 194, 'b': 54, 'c':34, 'd': 44, 'e': 312, 'full':31}

ks = d.keys()
best_key_so_far = list(ks)[0]  # Have to turn ks into a real list before using [] to select an item
for k in ks:
    if d[k] > d[best_key_so_far]:
        best_key_so_far = k

print("key " + best_key_so_far + " has the highest value, " + str(d[best_key_so_far]))
————

                                             ———————————————— week 3 ————————————————
function定义，注意后面的括号不要忘记
def name( parameters ):
    ***This is a comment stating what the function does.***   #用***来表示
    statements
结束def中的定义时，用return而不用print，后者会造成误会，且返回none

tuple=["a","b",1942,"you"]为了可读性，可以省略方括号，tuple="a","b",1942,"you"
同理return (c, a)可以写成return c, a

julia = "Julia", "Roberts", 1967, "Duplicity", 2009, "Actress", "Atlanta, Georgia"
name, surname, birth_year, movie, movie_year, profession, birth_place = julia
前两行左右的个数要对等

————Tuple unpacking
def add (x,y):
    return x+y

print(add(3,4))
z=(5,4)
print(add(*z))  #this line will cause the values to be unpacked
print(add(z))   #this line causes an error
—————
If you remember, the .items() dictionary method produces a sequence of tuples. 
Keeping this in mind, we have provided you a dictionary called pokemon. 
For every key value pair, append the key to the list p_names, and append the value to the list p_number. 
Do not use the .keys() or .values() methods.
做法如下：
p_names=[]
p_number=[]
pokemon = {'Rattata': 19, 'Machop': 66, 'Seel': 86, 'Volbeat': 86, 'Solrock': 126}
for p in pokemon.items():  #这里注意这个items的用法，用得好比.keys()省心不少
    p_names.append(p[0])
    p_number.append(p[1])
————

                                                ———————————————— week 4 ————————————————
Write a function called stop_at_four that iterates through a list of numbers. 
Using a while loop, append each number to a new list until the number 4 appears. 
The function should return the new list.有点难，错误了好多次才完全正确
————第一次把lst=[]写到def前，这样成了global范围，local无法引用，参考上一周的课；第二次在while里没加范围条件：n<len(lst1) and，提示out of range错误
def stop_at_four(lst1):
    n=0
    lst=[]
    while n<len(lst1) and lst1[n] !=4:
        lst.append(lst1[n])
        n=n+1
    return lst  
————Optional Parameters，
initial = 7
def f(x, y =3, z=initial):
    print("x, y, z, are: " + str(x) + ", " + str(y) + ", " + str(z))
f(2)         #x, y, z, are: 2, 3, 7 当f只有一个值的时候，这个值指向x
f(2, 5)      #x, y, z, are: 2, 5, 7
f(2, 5, 8)   #x, y, z, are: 2, 5, 8
f(2,z=5)     #x, y, z, are: 2, 3, 5 这样可以直接跳过y的赋值，但记住f(z=5,2)这样的写法是不对的
————format里两种用法如下：
# this works
names = ["Jack","Jill","Mary"]
for n in names:
    print("'{}!' she yelled. '{}! {}, {}!'".format(n,n,n,"say hello"))

# but this also works!
names = ["Jack","Jill","Mary"]
for n in names:
    print("'{0}!' she yelled. '{0}! {0}, {1}!'".format(n,"say hello"))
————
def func(args):
    return ret_val
等价于
func=lambda args:ret_val
e.g print((lambda x: x-2)(6)) #4
WEEK FOUR 练习题：
Write a function called checkingIfIn that takes three parameters. 
The first is a required parameter, which should be a string. 
The second is an optional parameter called direction with a default value of True. 
The third is an optional parameter called d that has a default value of {'apple': 2, 'pear': 1, 'fruit': 19, 'orange': 5, 'banana': 3, 'grapes': 2, 'watermelon': 7}. 
Write the function checkingIfIn so that when the second parameter is True, 
it checks to see if the first parameter is a key in the third parameter;if it is, return True, otherwise return False. 
But if the second paramter is False, then the function should check to see if the first parameter is not a key of the third. 
If it’s not, the function should return True in this case, and if it is, it should return False.
————我觉得我开始的写法绕晕了
以下是第一次写法：（错误思路：先思考x在不在d里，再判断direction的对错）
def checkingIfIn(x,direction=True,d={'apple': 2, 'pear': 1, 'fruit': 19, 'orange': 5, 'banana': 3, 'grapes': 2, 'watermelon': 7}):
    ks=d.keys()
    for key in ks:
        if x == key:
            if direction==True:
                return True
            else:
                return False
        else:
            if direction == True:
                return False
            else:
                return True
实际上正确的写法：（简单很多有木有！！！正确思路：先判断direction的对错，再思考a在不在d里）
def checkingIfIn(a, direction = True, d = {'apple': 2, 'pear': 1, 'fruit': 19, 'orange': 5, 'banana': 3, 'grapes': 2, 'watermelon': 7}):
    if direction == True:
        if a in d:
            return True
        else:
            return False
    else:
        if a not in d:
            return True
        else:
            return False
————            

                                                   ———————————————— week 5 ————————————————
————关于sort的介绍：用.sort()有side effect，用sorted（）比较好
L2 = ["Cherry", "Apple", "Blueberry"]

L3 = sorted(L2)
print(L3)
print(sorted(L2))  #不改变L2的排序
print(L2) # unchanged

print("----")

L2.sort()
print(L2)
print(L2.sort())  #return value is None 改变了L2的排序，有side effect
————sorted可以用于strings，但是sort不能
print (sorted("apple")) #return ["a","e","l',"p","p"]
"apple".sort()  #错误
————综上，sorted更优
L2 = ["Cherry", "Apple", "Blueberry"]
print(sorted(L2)，reverse=True)  #从C到A排列
————
L1 = [1, 7, 4, -2, 3]

def absolute(x):
    if x >= 0:
        return x
    else:
        return -x

L2 = sorted(L1, key=absolute)  #key is an optional parameter,记住absolute是一个function
print(L2)

#or in reverse order
print(sorted(L1, reverse=True, key=absolute))
————sorting a dictionary 代码很简洁
L = ['E', 'F', 'B', 'A', 'D', 'I', 'I', 'C', 'B', 'A', 'D', 'D', 'E', 'D']

d = {}
for x in L:
    if x in d:
        d[x] = d[x] + 1
    else:
        d[x] = 1

# now loop through the sorted keys
for k in sorted(d, key=lambda k: d[k], reverse=True):   #注意lambda k:（条件1，条件2）是先按条件1排列，条件1相同看条件2
      print("{} appears {} times".format(k, d[k]))
print (sorted(d))#我为了测试多加的，出来的结果是['A', 'B', 'C', 'D', 'E', 'F', 'I']，和print （d）的结果是不一样的，后者显示的是dictionary      
————Breaking Ties: Second Sorting 这个知识点在学第三门课的时候被点出来了
fruits = ['peach', 'kiwi', 'apple', 'blueberry', 'papaya', 'mango', 'pear']
new_order = sorted(fruits, key=lambda fruit_name: (len(fruit_name), fruit_name))
for fruit in new_order:
    print(fruit)
————结果如下，先按长度升序排列，遇到长度一样的，再按字母表排列
kiwi
pear
apple
mango
peach
papaya
blueberry
————

最后的练习超级费时……说不上难不难，只是把所有知识点都结合起来了。有机会反复看看
